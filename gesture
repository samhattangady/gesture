import numpy as np
import cv2

# Declaring list of colours
pink = [[148,170,22],[179,255,255]]
green = [[41,170,66],[62,255,255]]

# Select colour for each finger
indexColour= pink
thumbColour= green

# Setting kernel for morphology operations
kernel = np.ones((5,5),np.uint8)

# Starting video capture
cap = cv2.VideoCapture(0)

# Function to follow finger and draw contour around it (for now)
def fingerTrack(hsv, finger, frame, colour):
	maskFinger = cv2.inRange (hsv, np.array(finger[0]), np.array(finger[1]))
	resFinger = cv2.bitwise_and(frame,frame,mask=maskFinger)
	resFinger = cv2.morphologyEx(resFinger, cv2.MORPH_OPEN, kernel)
	resfinger = cv2.dilate (resFinger, kernel, iterations = 4)
	resFingerCanny = cv2.Canny(resFinger, 100, 200)	
	_, contours, heirarchy = cv2.findContours(resFingerCanny, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
	cv2.drawContours(resFinger,contours,-1,colour,1)
	return resFinger

# Loop to be run every frame
while(1):

	# We start by reading every frame from the video input. We flip it horizontally, and blur it	
	_, frame = cap.read()
	frame = cv2.flip(frame,1)
	hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
	hsv = cv2.GaussianBlur(hsv,(5,5),0)


	# We then isolate the colours defined earlier, and draw a contour around it. *Should be functioned out...
	index = fingerTrack(hsv, indexColour, frame, (0,0,255))
	thumb = fingerTrack(hsv, thumbColour, frame, (0,255,0))
 	
	# Add the two resultant
	res = cv2.add(thumb,index)

	# Display image and quit when 'Esc' key is pressed
	cv2.imshow ('Tracker',res)
	k = cv2.waitKey(5) & 0xFF
	if k == 27:
		break

cv2.destroyAllWindows()
